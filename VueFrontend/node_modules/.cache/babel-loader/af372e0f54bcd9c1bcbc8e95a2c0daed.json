{"remainingRequest":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\babel-loader\\lib\\index.js!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\TileRow.vue?vue&type=script&lang=js&","dependencies":[{"path":"S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\TileRow.vue","mtime":1610095281071},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TileElement from './TileElement.vue';\nimport LabelItem from \"./LabelItem\";\nexport default {\n  name: \"TileRow\",\n  components: {\n    LabelItem: LabelItem,\n    TileElement: TileElement\n  },\n  props: [\"tiles\", \"cols\", \"rowNumber\", \"gridName\"],\n\n  /* gets this\n  [\n      { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\n      { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } },\n      ...\n  ]*/\n  methods: {\n    getTiles: function getTiles() {\n      return this.$props.tiles;\n    },\n    getRowNumber: function getRowNumber() {\n      return this.$props.rowNumber;\n    },\n    getTileOrEmpty: function getTileOrEmpty(array, x, y) {\n      var t = array.find(function (element) {\n        return element.x == x && element.y == y;\n      });\n\n      if (t == undefined) {\n        return {};\n      } else {\n        return t.tile;\n      }\n    },\n    onTileClick: function onTileClick(tileId) {\n      this.$emit('tile-clicked', tileId);\n    }\n  }\n};",{"version":3,"sources":["TileRow.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA,OAAA,WAAA,MAAA,mBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,WAAA,EAAA;AAFA,GAFA;AAMA,EAAA,KAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,WAAA,EAAA,UAAA,CANA;;AAOA;;;;;;AAMA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA;AACA,KAHA;AAIA,IAAA,YAJA,0BAIA;AACA,aAAA,KAAA,MAAA,CAAA,SAAA;AACA,KANA;AAOA,IAAA,cAPA,0BAOA,KAPA,EAOA,CAPA,EAOA,CAPA,EAOA;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,OAAA,EAAA;AACA,eAAA,OAAA,CAAA,CAAA,IAAA,CAAA,IAAA,OAAA,CAAA,CAAA,IAAA,CAAA;AACA,OAFA,CAAA;;AAIA,UAAA,CAAA,IAAA,SAAA,EAAA;AACA,eAAA,EAAA;AACA,OAFA,MAEA;AACA,eAAA,CAAA,CAAA,IAAA;AACA;AACA,KAjBA;AAkBA,IAAA,WAAA,EAAA,qBAAA,MAAA,EAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA,MAAA;AACA;AApBA;AAbA,CAAA","sourcesContent":["<template>\r\n    <div class=\"row\">\r\n        <LabelItem :label=\"this.$props.rowNumber\"></LabelItem>\r\n        <TileElement v-for=\"n in this.$props.cols\"\r\n                     v-bind:tile=\"getTileOrEmpty(getTiles(), getRowNumber(), n)\"\r\n                     v-bind:id=\"gridName + '_' + rowNumber + '_' + n\"\r\n                     v-on:tile-clicked=\"onTileClick\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import TileElement from './TileElement.vue';\r\n    import LabelItem from \"./LabelItem\";\r\n\r\n    export default {\r\n        name: \"TileRow\",\r\n        components: {\r\n            LabelItem,\r\n            TileElement\r\n        },\r\n        props: [\"tiles\", \"cols\", \"rowNumber\", \"gridName\"],\r\n        /* gets this\r\n        [\r\n            { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\r\n            { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } },\r\n            ...\r\n        ]*/\r\n        methods: {\r\n            getTiles() {\r\n                return this.$props.tiles\r\n            },\r\n            getRowNumber() {\r\n                return this.$props.rowNumber\r\n            },\r\n            getTileOrEmpty(array, x, y) {\r\n                let t = array.find(function (element) {\r\n                    return element.x == x && element.y == y;\r\n                });\r\n\r\n                if (t == undefined) {\r\n                    return {}\r\n                } else {\r\n                    return t.tile\r\n                }\r\n            },\r\n            onTileClick: function (tileId) {\r\n                this.$emit('tile-clicked', tileId)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n\r\n"],"sourceRoot":"src\\components"}]}