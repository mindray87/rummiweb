{"remainingRequest":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\babel-loader\\lib\\index.js!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\RummiGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\RummiGrid.vue","mtime":1610095281070},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Map from \"S:\\\\FH\\\\rummikub_web\\\\VueFrontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\nimport _Array$from from \"S:\\\\FH\\\\rummikub_web\\\\VueFrontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/from\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TileRow from \"./TileRow\";\nimport GridLabel from \"./LabelItem\";\nexport default {\n  name: \"RummiGrid\",\n  components: {\n    GridLabel: GridLabel,\n    TileRow: TileRow\n  },\n  props: [\"grid\", \"name\"],\n  methods: {\n    getColCount: function getColCount() {\n      return this.$props.grid.COLS;\n    },\n    getRows: function getRows() {\n      var map = groupBy(this.$props.grid.tiles, function (tile) {\n        return tile.x;\n      });\n      var rows = [];\n\n      _Array$from(map.keys()).sort().forEach(function (i) {\n        return rows.push(map.get(i));\n      });\n      /* returns this [\n          { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\n          { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } }\n        ]*/\n\n\n      return rows.reduce(function (total, currentValue) {\n        return total.concat(currentValue);\n      }, []);\n    }\n  }\n};\n\nfunction groupBy(list, keyGetter) {\n  var map = new _Map();\n  list.forEach(function (item) {\n    var key = keyGetter(item);\n    var collection = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n  return map;\n}",{"version":3,"sources":["RummiGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAaA,OAAA,OAAA,MAAA,WAAA;AACA,OAAA,SAAA,MAAA,aAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,SAAA,EAAA,SAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAFA;AAGA,EAAA,KAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAHA;AAIA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,OAJA,qBAIA;AACA,UAAA,GAAA,GAAA,OAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,CAAA;AAAA,OAAA,CAAA;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,kBAAA,GAAA,CAAA,IAAA,EAAA,EACA,IADA,GAEA,OAFA,CAEA,UAAA,CAAA;AAAA,eAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAFA;AAIA;;;;;;AAIA,aAAA,IAAA,CAAA,MAAA,CAAA,UAAA,KAAA,EAAA,YAAA;AAAA,eAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA;AAAA,OAAA,EAAA,EAAA,CAAA;AACA;AAhBA;AAJA,CAAA;;AAwBA,SAAA,OAAA,CAAA,IAAA,EAAA,SAAA,EAAA;AACA,MAAA,GAAA,GAAA,UAAA;AACA,EAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,GAAA,GAAA,SAAA,CAAA,IAAA,CAAA;AACA,QAAA,UAAA,GAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA;;AACA,QAAA,CAAA,UAAA,EAAA;AACA,MAAA,GAAA,CAAA,GAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA;AACA,KAFA,MAEA;AACA,MAAA,UAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA,GARA;AASA,SAAA,GAAA;AACA","sourcesContent":["<template>\r\n    <div class=\"grid\">\r\n\r\n        <TileRow v-for=\"n in this.$props.grid.ROWS\"\r\n                 v-bind:row-number=\"n\"\r\n                 v-bind:cols=\"getColCount()\"\r\n                 v-bind:tiles=\"getRows()\"\r\n                 :grid-name=\"name\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import TileRow from \"./TileRow\";\r\n    import GridLabel from \"./LabelItem\";\r\n\r\n    export default {\r\n        name: \"RummiGrid\",\r\n        components: {GridLabel, TileRow},\r\n        props: [\"grid\", \"name\"],\r\n        methods: {\r\n            getColCount() {\r\n                return this.$props.grid.COLS\r\n            },\r\n            getRows() {\r\n                let map = groupBy(this.$props.grid.tiles, tile => tile.x);\r\n                let rows = [];\r\n                Array.from(map.keys())\r\n                    .sort()\r\n                    .forEach(i => rows.push(map.get(i)));\r\n\r\n                /* returns this [\r\n                    { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\r\n                    { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } }\r\n                  ]*/\r\n                return rows.reduce((total, currentValue) => total.concat(currentValue), []);\r\n            }\r\n        }\r\n    }\r\n\r\n    function groupBy(list, keyGetter) {\r\n        const map = new Map();\r\n        list.forEach((item) => {\r\n            const key = keyGetter(item);\r\n            const collection = map.get(key);\r\n            if (!collection) {\r\n                map.set(key, [item]);\r\n            } else {\r\n                collection.push(item);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .grid {\r\n        display: inline-block;\r\n        padding: 0.05em;\r\n        min-width: 400px;\r\n    }\r\n</style>"],"sourceRoot":"src\\components"}]}