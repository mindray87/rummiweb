{"remainingRequest":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!S:\\FH\\rummikub_web\\VueFrontend\\src\\views\\Rules.vue?vue&type=template&id=506088a6&","dependencies":[{"path":"S:\\FH\\rummikub_web\\VueFrontend\\src\\views\\Rules.vue","mtime":1610095281074},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"container\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"h1\", { staticClass: \"testcolor\" }, [_vm._v(\"Rummikub Rules\")])\n      ]),\n      _c(\"div\", { staticClass: \"row mt-1 mb-1\" }, [\n        _c(\n          \"nav\",\n          {\n            staticClass: \"navbar navbar-light bg-light\",\n            attrs: { id: \"navbar-example2\" }\n          },\n          [\n            _c(\"a\", { staticClass: \"navbar-brand\", attrs: { href: \"#\" } }, [\n              _vm._v(\"Rules\")\n            ]),\n            _c(\"ul\", { staticClass: \"nav nav-pills\" }, [\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#objective\" } },\n                  [_vm._v(\"Objective of the Game\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#setup\" } },\n                  [_vm._v(\"Setup\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\"a\", { staticClass: \"nav-link\", attrs: { href: \"#sets\" } }, [\n                  _vm._v(\"Sets\")\n                ])\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  {\n                    staticClass: \"nav-link\",\n                    attrs: { href: \"#playingthegame\" }\n                  },\n                  [_vm._v(\"Playing the Game\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#manipulation\" } },\n                  [_vm._v(\"Manipulation\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#thejoker\" } },\n                  [_vm._v(\"The Joker\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#scoring\" } },\n                  [_vm._v(\"Scoring\")]\n                )\n              ]),\n              _c(\"li\", { staticClass: \"nav-item\" }, [\n                _c(\n                  \"a\",\n                  { staticClass: \"nav-link\", attrs: { href: \"#strategy\" } },\n                  [_vm._v(\"Strategy\")]\n                )\n              ])\n            ])\n          ]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\n          \"div\",\n          {\n            attrs: {\n              \"data-spy\": \"scroll\",\n              \"data-target\": \"#navbar-example2\",\n              \"data-offset\": \"0\"\n            }\n          },\n          [\n            _c(\"h3\", { attrs: { id: \"objective\" } }, [\n              _vm._v(\"Object of The Game\")\n            ]),\n            _c(\"p\", [\n              _vm._v(\n                \"\\n                To be the first to place all tiles from the rack onto the table.\\n            \"\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"setup\" } }, [_vm._v(\"Set-up\")]),\n            _c(\"p\", [\n              _vm._v(\n                '\\n                Place tiles face down in centre of table and mix well. Every player picks one tile.\\n                The player with the highest number begins. Play proceeds clockwise.\\n                Return tiles to table and mix tiles again. Every player then takes 14 tiles\\n                and arranges them on his/her rack into sets of \"groups\" or \"streets\".\\n                The remaining tiles on the table are the pool.\\n            '\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"sets\" } }, [_vm._v(\"Sets\")]),\n            _c(\"p\", [\n              _c(\"ul\", [\n                _c(\"li\", [\n                  _vm._v(\"\\n                    A \"),\n                  _c(\"b\", [_vm._v('\"group\"')]),\n                  _vm._v(\n                    \" is a set of either three or four tiles of the same number but in different\\n                    colours. For example: black 7, red 7, blue 7, orange 7.\\n                \"\n                  )\n                ]),\n                _c(\"li\", [\n                  _vm._v(\"\\n                    A \"),\n                  _c(\"b\", [_vm._v('\"streets\"')]),\n                  _vm._v(\n                    \" are a set of three or more consecutive (one after the other) numbers, which\\n                    are all of the same colour. For example: blue 3, 4, 5 and 6.\\n                \"\n                  )\n                ])\n              ]),\n              _c(\"u\", [_vm._v(\"Note:\")]),\n              _vm._v(\n                \" Number 1 is always played as the lowest number and may not follow number 13.\\n\\n            \"\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"playingthegame\" } }, [\n              _vm._v(\"Playing The Game\")\n            ]),\n            _c(\"p\", [\n              _vm._v(\n                '\\n                Players must place sets, valued at least 51 points (add up the set numbers),\\n                onto the table in the first move. This move is called the \"initial meld\". If unable\\n                to do an initial meld, or player chooses to delay initial meld, a tile must be taken\\n                from the pool and this concludes the player\\'s turn.\\n                During the initial meld sets on the table may not be manipulated or built upon\\n                with tiles from playerâ€™s rack.\\n            '\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"manipulation\" } }, [\n              _vm._v(\"Manipulation\")\n            ]),\n            _c(\"p\", [\n              _vm._v(\n                '\\n                Manipulation is the most exciting part of playing \"Rummikub\". Players try to table the\\n                greatest amount of tiles by rearranging or adding to sets which are already on the table.\\n                Sets can be manipulated in many ways as long as at the end of each\\n                round only legitimate sets remain and no loose tiles are left over. Each combination must consist of\\n                at least\\n                three pieces. if a player has taken pieces out of combinations and does not manage to lay down all\\n                pieces next\\n                to other combinations the he has to take all those pieces on is own counter holder.\\n            '\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"thejoker\" } }, [_vm._v(\"The Joker\")]),\n            _c(\"p\", [\n              _vm._v(\n                \"\\n                A joker can be retrieved from a set by replacing it with a tile of the same numerical value and\\n                colour it represents. The tile used to replace the joker can come from the player's rack or from the\\n                table.\\n                In the case of a group of 3, the joker can be replaced by the tile of either of the missing colours.\\n                A joker that has been replaced must be used in the player's same turn as part of a new\\n                set. A set containing a joker can have tiles added to it, be split apart or have tiles removed\\n                from it. The joker has a penalty value of 30 points if it remains on a player's rack at the\\n                end of the game.\\n            \"\n              )\n            ]),\n            _c(\"h3\", { attrs: { id: \"scoring\" } }, [_vm._v(\"Scoring\")]),\n            _c(\"p\", [\n              _vm._v(\n                \"\\n                After a player has cleared the rack the losing players add up\\n                the values of the tiles they still have on their racks. This score is totalled as a minus(negative)\\n                amount. The winner of the round receives a positive score equal to the total of all the\\n                losers' points. At the end of a session, each player totals his/her minus and plus scores\\n                to get the total score. The player with the highest score is the overall winner.\\n            \"\n              )\n            ]),\n            _c(\"p\", [\n              _c(\"b\", [_vm._v(\"Example score table\")]),\n              _c(\"table\", { staticClass: \"table\" }, [\n                _c(\"thead\", { staticClass: \"thead-dark\" }, [\n                  _c(\"tr\", [\n                    _c(\"th\"),\n                    _c(\"th\", { attrs: { scope: \"col\" } }, [_vm._v(\"Player A\")]),\n                    _c(\"th\", { attrs: { scope: \"col\" } }, [_vm._v(\"Player B\")]),\n                    _c(\"th\", { attrs: { scope: \"col\" } }, [_vm._v(\"Player C\")]),\n                    _c(\"th\", { attrs: { scope: \"col\" } }, [_vm._v(\"Player D\")])\n                  ])\n                ]),\n                _c(\"tr\", [\n                  _c(\"th\", { attrs: { scope: \"row\" } }, [_vm._v(\"Round 1\")]),\n                  _c(\"td\", [_vm._v(\"+ 24\")]),\n                  _c(\"td\", [_vm._v(\"- 5\")]),\n                  _c(\"td\", [_vm._v(\"- 16\")]),\n                  _c(\"td\", [_vm._v(\"- 3\")])\n                ]),\n                _c(\"tr\", [\n                  _c(\"th\", { attrs: { scope: \"row\" } }, [_vm._v(\"Round 2\")]),\n                  _c(\"td\", [_vm._v(\"- 6\")]),\n                  _c(\"td\", [_vm._v(\"- 11\")]),\n                  _c(\"td\", [_vm._v(\"+ 22\")]),\n                  _c(\"td\", [_vm._v(\"- 5\")])\n                ]),\n                _c(\"tr\", [\n                  _c(\"th\", { attrs: { scope: \"row\" } }, [_vm._v(\"Round 3\")]),\n                  _c(\"td\", [_vm._v(\"- 32\")]),\n                  _c(\"td\", [_vm._v(\"- 13\")]),\n                  _c(\"td\", [_vm._v(\"- 2\")]),\n                  _c(\"td\", [_vm._v(\"+ 47\")])\n                ]),\n                _c(\"tr\", [\n                  _c(\"th\", { attrs: { scope: \"row\" } }, [_vm._v(\"Round 4\")]),\n                  _c(\"td\", [_vm._v(\"+ 31\")]),\n                  _c(\"td\", [_vm._v(\"- 2\")]),\n                  _c(\"td\", [_vm._v(\"- 5\")]),\n                  _c(\"td\", [_vm._v(\"- 12\")])\n                ]),\n                _c(\"tr\", { staticClass: \"table-secondary\" }, [\n                  _c(\"th\", { attrs: { scope: \"row\" } }, [_vm._v(\"Total\")]),\n                  _c(\"td\", [_vm._v(\"+ 17\")]),\n                  _c(\"td\", [_vm._v(\"- 31\")]),\n                  _c(\"td\", [_vm._v(\"- 1\")]),\n                  _c(\"td\", [_vm._v(\"+ 27\")])\n                ])\n              ])\n            ]),\n            _c(\"h3\", { attrs: { id: \"strategy\" } }, [_vm._v(\"Strategy\")]),\n            _c(\"p\", [\n              _vm._v(\n                '\\n                The beginning of a round of \"Rummikub\" may seem slow but as the table builds up,\\n                more and more manipulations are possible. In the early stages of the game it may be\\n                a good idea to hold back some tiles so that other players \"open up\" the table and\\n                provide more opportunities for manipulation.\\n            '\n              )\n            ]),\n            _c(\"p\", [\n              _vm._v(\n                \"\\n                Sometimes it is useful to hold back the fourth tile of a group or a street and lay only\\n                three, so that on the next turn one can lay a tile instead of drawing from the pool.\\n            \"\n              )\n            ]),\n            _c(\"p\", [\n              _vm._v(\n                '\\n                Keeping a joker on one\\'s rack may also be a good strategy - although one risks\\n                being caught with a joker when another player goes \"Rummikub\".\\n            '\n              )\n            ])\n          ]\n        )\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}