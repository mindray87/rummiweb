{"remainingRequest":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\RummiGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"S:\\FH\\rummikub_web\\VueFrontend\\src\\components\\RummiGrid.vue","mtime":1610095281070},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"S:\\FH\\rummikub_web\\VueFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TileRow from \"./TileRow\";\nimport GridLabel from \"./LabelItem\";\n\nexport default {\n    name: \"RummiGrid\",\n    components: {GridLabel, TileRow},\n    props: [\"grid\", \"name\"],\n    methods: {\n        getColCount() {\n            return this.$props.grid.COLS\n        },\n        getRows() {\n            let map = groupBy(this.$props.grid.tiles, tile => tile.x);\n            let rows = [];\n            Array.from(map.keys())\n                .sort()\n                .forEach(i => rows.push(map.get(i)));\n\n            /* returns this [\n                { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\n                { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } }\n              ]*/\n            return rows.reduce((total, currentValue) => total.concat(currentValue), []);\n        }\n    }\n}\n\nfunction groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach((item) => {\n        const key = keyGetter(item);\n        const collection = map.get(key);\n        if (!collection) {\n            map.set(key, [item]);\n        } else {\n            collection.push(item);\n        }\n    });\n    return map;\n}\n",{"version":3,"sources":["RummiGrid.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RummiGrid.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n    <div class=\"grid\">\r\n\r\n        <TileRow v-for=\"n in this.$props.grid.ROWS\"\r\n                 v-bind:row-number=\"n\"\r\n                 v-bind:cols=\"getColCount()\"\r\n                 v-bind:tiles=\"getRows()\"\r\n                 :grid-name=\"name\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import TileRow from \"./TileRow\";\r\n    import GridLabel from \"./LabelItem\";\r\n\r\n    export default {\r\n        name: \"RummiGrid\",\r\n        components: {GridLabel, TileRow},\r\n        props: [\"grid\", \"name\"],\r\n        methods: {\r\n            getColCount() {\r\n                return this.$props.grid.COLS\r\n            },\r\n            getRows() {\r\n                let map = groupBy(this.$props.grid.tiles, tile => tile.x);\r\n                let rows = [];\r\n                Array.from(map.keys())\r\n                    .sort()\r\n                    .forEach(i => rows.push(map.get(i)));\r\n\r\n                /* returns this [\r\n                    { x: 1, y: 5, tile: { number: 1, color: 'GREEN', joker: false } },\r\n                    { x: 1, y: 1, tile: { number: 1, color: 'WHITE', joker: true } }\r\n                  ]*/\r\n                return rows.reduce((total, currentValue) => total.concat(currentValue), []);\r\n            }\r\n        }\r\n    }\r\n\r\n    function groupBy(list, keyGetter) {\r\n        const map = new Map();\r\n        list.forEach((item) => {\r\n            const key = keyGetter(item);\r\n            const collection = map.get(key);\r\n            if (!collection) {\r\n                map.set(key, [item]);\r\n            } else {\r\n                collection.push(item);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .grid {\r\n        display: inline-block;\r\n        padding: 0.05em;\r\n        min-width: 400px;\r\n    }\r\n</style>"]}]}